Assignment 5

#include <iostream>
#include <string>
using namespace std;

// Book Node Class (Doubly Linked List)
class Book {
public:
    int bookID;
    string title;
    string author;
    Book* next;
    Book* prev;

    Book(int id, string t, string a) {
        bookID = id;
        title = t;
        author = a;
        next = nullptr;
        prev = nullptr;
    }
};

// Library Class
class Library {
private:
    Book* head;

public:
    Library() {
        head = nullptr;
    }

    // ➤ 1) Insert at Beginning
    void insertAtBeginning(int id, string title, string author) {
        Book* newBook = new Book(id, title, author);
        newBook->next = head;
        if (head != nullptr) {
            head->prev = newBook;
        }
        head = newBook;
        cout << "Book Added at Beginning!\n";
    }

    // ➤ 2) Insert at End
    void insertAtEnd(int id, string title, string author) {
        Book* newBook = new Book(id, title, author);
        if (head == nullptr) {
            head = newBook;
            cout << "Book Added at End (Library was Empty)!\n";
            return;
        }
        Book* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newBook;
        newBook->prev = temp;
        cout << "Book Added at End!\n";
    }

    // ➤ 3) Insert at Specific Position
    void insertAtPosition(int id, string title, string author, int pos) {
        if (pos == 1) {
            insertAtBeginning(id, title, author);
            return;
        }

        Book* temp = head;
        for (int i = 1; i < pos - 1; i++) {
            if (temp == nullptr) {
                cout << "Position out of range!\n";
                return;
            }
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range!\n";
            return;
        }

        Book* newBook = new Book(id, title, author);
        newBook->next = temp->next;
        newBook->prev = temp;

        if (temp->next != nullptr) {
            temp->next->prev = newBook;
        }

        temp->next = newBook;
        cout << "Book Added at Position " << pos << "!\n";
    }

    // ➤ 4) Delete at Beginning
    void deleteAtBeginning() {
        if (head == nullptr) {
            cout << "Library is Empty!\n";
            return;
        }
        Book* temp = head;
        head = head->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
        delete temp;
        cout << "Book Deleted from Beginning!\n";
    }

    // ➤ 5) Delete at End
    void deleteAtEnd() {
        if (head == nullptr) {
            cout << "Library is Empty!\n";
            return;
        }
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            cout << "Only Book Deleted, Library is now Empty!\n";
            return;
        }

        Book* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->prev->next = nullptr;
        delete temp;
        cout << "Book Deleted from End!\n";
    }

    // ➤ 6) Delete at Specific Position
    void deleteAtPosition(int pos) {
        if (head == nullptr) {
            cout << "Library is Empty!\n";
            return;
        }
        if (pos == 1) {
            deleteAtBeginning();
            return;
        }

        Book* temp = head;
        for (int i = 1; i < pos; i++) {
            if (temp == nullptr) {
                cout << "Position out of range!\n";
                return;
            }
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range!\n";
            return;
        }

        if (temp->prev != nullptr) {
            temp->prev->next = temp->next;
        }
        if (temp->next != nullptr) {
            temp->next->prev = temp->prev;
        }
        delete temp;
        cout << "Book Deleted from Position " << pos << "!\n";
    }

    // ➤ 7) Display Books
    void displayBooks() {
        if (head == nullptr) {
            cout << "Library is Empty!\n";
            return;
        }
        Book* temp = head;
        cout << "\n--- Library Books ---\n";
        while (temp != nullptr) {
            cout << "ID: " << temp->bookID << " | Title: " << temp->title << " | Author: " << temp->author << endl;
            temp = temp->next;
        }
    }
};

// ➤ Main Function
int main() {
    Library library;
    int choice, pos, id;
    string title, author;

    do {
        cout << "\n--- Library Management System ---\n";
        cout << "1. Add Book at Beginning\n";
        cout << "2. Add Book at End\n";
        cout << "3. Add Book at Position\n";
        cout << "4. Delete Book at Beginning\n";
        cout << "5. Delete Book at End\n";
        cout << "6. Delete Book at Position\n";
        cout << "7. Display Books\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter Book ID: "; cin >> id;
                cout << "Enter Title: "; cin.ignore(); getline(cin, title);
                cout << "Enter Author: "; getline(cin, author);
                library.insertAtBeginning(id, title, author);
                break;

            case 2:
                cout << "Enter Book ID: "; cin >> id;
                cout << "Enter Title: "; cin.ignore(); getline(cin, title);
                cout << "Enter Author: "; getline(cin, author);
                library.insertAtEnd(id, title, author);
                break;

            case 3:
                cout << "Enter Book ID: "; cin >> id;
                cout << "Enter Title: "; cin.ignore(); getline(cin, title);
                cout << "Enter Author: "; getline(cin, author);
                cout << "Enter Position: "; cin >> pos;
                library.insertAtPosition(id, title, author, pos);
                break;

            case 4:
                library.deleteAtBeginning();
                break;

            case 5:
                library.deleteAtEnd();
                break;

            case 6:
                cout << "Enter Position to Delete: "; cin >> pos;
                library.deleteAtPosition(pos);
                break;

            case 7:
                library.displayBooks();
                break;

            case 8:
                cout << "Exiting Program...\n";
                break;

            default:
                cout << "Invalid Choice! Try again.\n";
        }
    } while (choice != 8);

    return 0;
}
